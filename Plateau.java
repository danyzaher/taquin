package taquin;import java.util.*;import static java.lang.Thread.sleep;public class Plateau {    private ArrayList<Plateau> visite = new ArrayList<>();    private ArrayList<Plateau> priorityQueue = new ArrayList();    private int[][] plat = new int[3][3];    private static final int[][] solution = new int[3][3];    public Plateau() {        ArrayList<Integer> valeurs = new ArrayList();        for (int k = 1; k<=8; k++) {            valeurs.add(k);        }        int compteur=0;        for (int i = 0; i<=2; i ++) {            for (int j = 0; j<=2; j++) {                if (compteur>=8) {                }                else {                    solution[i][j] = valeurs.get(compteur);                    compteur++;                }            }        }        Collections.shuffle(valeurs);        compteur=0;        for (int i = 0; i<=2; i ++) {            for (int j = 0; j<=2; j++) {                if (compteur>=8) {                }                else {                    plat[i][j] = valeurs.get(compteur);                    compteur++;                }            }        }        visite.add(this);    }    public String toString() {        String affiche = "";        for (int i = 0; i<=2; i ++) {            for (int j = 0; j<=2; j++) {                affiche = affiche + plat[i][j] + " ";            }            affiche = affiche + "\n";        }        return affiche;    }    public int[][] getPlateau() {        return plat;    }    public int countError() {        int fautes = 0;        for (int i = 0; i<=2; i++) {            for (int j=0; j<=2; j++) {                if (plat[i][j] != solution[i][j]) {                    fautes++;                }            }        }        return fautes;    }    public  Boolean fini() {        Boolean fin = false;        int fautes = 0;        for (int i = 0; i<=2; i++) {            for (int j=0; j<=2; j++) {                if (plat[i][j] != solution[i][j]) {                     fautes++;                }            }        }        if (fautes == 0) {            fin = true;        }        return fin;    }    public String testPlat() {        String affiche = "";        for (int i = 0; i<=2; i++) {            for (int j = 0; j<=2; j++) {                affiche = affiche + plat[i][j] + " ";            }            affiche = affiche + "\n";        }        return affiche;    }    public String showSolution() {        String affiche = "";        for (int i = 0; i<=2; i++) {            for (int j = 0; j<=2; j++) {                affiche = affiche + solution[i][j] + " ";            }            affiche = affiche + "\n";        }        return affiche;    }    public coordonne coordonneeVide() throws ArrayIndexOutOfBoundsException{        coordonne cZ = new coordonne(0,0);        for (int i = 0; i<=2; i++) {            for (int j = 0; j<=2; j++) {                if (plat[i][j] == 0) {                    cZ.setX(i);                    cZ.setY(j);                }            }        }        return cZ;    }    public void setPlat(int[][] newplat) throws ArrayIndexOutOfBoundsException{        for (int i = 0; i<=2; i++) {            for (int j = 0; j<=2; j++) {                plat[i][j] = newplat[i][j];            }        }    }    public int countValid() {        int bon = 0;        for (int i = 0; i<=2; i++) {            for (int j=0; j<=2; j++) {                if (plat[i][j] == solution[i][j]) {                    bon++;                }            }        }        return bon;    }    public boolean Visite() {        boolean b = false;        for (int i = 0; i<visite.size(); i++) {            b = plat == visite.get(i).getPlateau();        }        return b;    }    public void triTableauDouble(int[][] tab) {        int tri = 1; int temp = 0;        for (int i=0; i<tab[0].length; i++)        {            while(tri == 1)            {                tri = 0;                for (int j=0; j<tab[0].length-1; j++)                {                    if(tab[i][j]>tab[i][j + 1])                    {                        temp = tab[i][j];                        tab[i][j]= tab[i][j + 1];                        tab[i][j + 1] = temp;                        tri=1;                    }                }            }        }    }    public coordonne Suivant() throws ArrayIndexOutOfBoundsException{        coordonne suivant = new coordonne(0,0);        Plateau provisoire4 = new Plateau();        Plateau provisoire2 = new Plateau();        Plateau provisoire1 = new Plateau();        Plateau provisoire3 = new Plateau();        provisoire1.setPlat(this.getPlateau());        provisoire2.setPlat(this.getPlateau());        provisoire3.setPlat(this.getPlateau());        provisoire4.setPlat(this.getPlateau());        int[][] score = new int[2][4];        int p = 1;        for (int j = 0; j<=3; j++) {            score[0][j] = p; p++;        }        if(Haut()) {            provisoire1.Bouger("HAUT");            if (provisoire1.countError() != 0) {               score[1][0] = provisoire1.countValid();            }        }        if(Bas()) {            provisoire2.Bouger("BAS");            if (provisoire2.countError() != 0) {                score[1][1] = provisoire2.countValid();            }        }        if(Droite()) {            provisoire3.Bouger("DROITE");            if (provisoire3.countError() != 0) {                score[1][2] = provisoire3.countValid();            }        }        if(Gauche()) {            provisoire4.Bouger("GAUCHE");            if (provisoire4.countError() != 0) {               score[1][3] = provisoire4.countValid();            }        }        triTableauDouble(score);        for (int i = 0; i < score.length; i++) {            System.out.println(score[1][i]);        }        for (int i = 0; i < 4; i++) {            if (i == 0) {                priorityQueue.add(provisoire1);            }            if (i == 1) {                priorityQueue.add(provisoire2);            }            if (i == 2) {                priorityQueue.add(provisoire3);            }            else {                priorityQueue.add(provisoire4);            }        }        suivant.setX(priorityQueue.get(0).coordonneeVide().x);        suivant.setY(priorityQueue.get(0).coordonneeVide().y);        visite.add(priorityQueue.get(0));        return suivant;    }    public void Bouger(String d) throws ArrayIndexOutOfBoundsException{        int p;int px;int py;        switch (d) {            case "HAUT" -> {                p = plat[coordonneeVide().x-1][coordonneeVide().y];                px = this.coordonneeVide().getX();                py = this.coordonneeVide().getY();                plat[px][py] = p;                plat[px-1][py] = 0;            }            case "BAS" -> {                p = plat[coordonneeVide().x+1][coordonneeVide().y];                px = this.coordonneeVide().getX();                py = this.coordonneeVide().getY();                plat[px][py] = p;                plat[px+1][py] = 0;            }            case "DROITE" -> {                p = plat[coordonneeVide().x][coordonneeVide().y+1];                px = this.coordonneeVide().getX();                py = this.coordonneeVide().getY();                plat[px][py] = p;                plat[px][py+1] = 0;            }            case "GAUCHE" -> {                p = plat[coordonneeVide().x][coordonneeVide().y-1];                px = this.coordonneeVide().getX();                py = this.coordonneeVide().getY();                plat[px][py] = p;                plat[px][py-1] = 0;            }        }    }    public void Deplacer() throws ArrayIndexOutOfBoundsException{        coordonne provisoire = Suivant();        int p = plat[provisoire.x][provisoire.y];        plat[coordonneeVide().x][coordonneeVide().y] = p;        plat[provisoire.x][provisoire.y] = 0;    }    public Boolean Haut() {        boolean b;        b = this.coordonneeVide().x != 0;        return b;    }    public Boolean Bas() {        boolean b;        b = this.coordonneeVide().x != 2;        return b;    }    public Boolean Droite() {        boolean b;        b = this.coordonneeVide().y != 2;        return b;    }    public Boolean Gauche() {        boolean b;        b = this.coordonneeVide().y != 0;        return b;    }    public static void main(String[] args) throws InterruptedException {        Plateau p = new Plateau(); int compteur = 0;        Scanner sc = new Scanner(System.in);        System.out.println("l'objectif est d'obtenir ce r√©sultat");        System.out.println(p.showSolution());        System.out.println("Voulez-vous jouer solo (1) ou laissez vous l'ia faire (2)?");        if (sc.nextInt() == 2) {            while (!p.fini()) {                System.out.println(p);                System.out.println("Encore " + p.countError() + " erreurs \n");                p.Deplacer();                compteur++;                sleep(2000);            }            System.out.println("L'IA a resolu le taquin en " + compteur + " coups !");        }        else {            while (!p.fini()) {                System.out.println("Entrez GAUCHE DROITE BAS ou HAUT");                System.out.println(p);                System.out.println("Encore " + p.countError() + " erreurs \n");                p.Bouger(sc.next());                compteur++;            }        }    }}